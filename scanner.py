#!usr/bin/env python

import requests, re, urlparse
from bs4 import BeautifulSoup

class Scanner:
    def __init__(self , url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.ignore_links = ignore_links

    def extract_links(self , url):
        response = self.session.get(url)
        return re.findall('(?:href=")(.*?)"', response.content)

    def crawl(self , url = None):
        #print("test string!")
        if url == None:
            url = self.target_url
        href_links = self.extract_links(url)
        for link in href_links:
            link = urlparse.urljoin(url, link)
            if "#" in link:
                link = link.split("#")[0]
            if self.target_url in link and link not in self.target_links and link not in self.ignore_links:
                self.target_links.append(link)
                print(link)
                self.crawl(link)

    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content , features="lxml")
        return parsed_html.findAll("form")

    def submit_forms(self , form , value , url):
        action = form.get("action")
        post_url = urlparse.urljoin(url , action)
        method = form.get("method")
        inputs_list = form.findAll("input")
        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = "value"
            if input_type == "text":
                input_value = value
            post_data[input_name] = input_value
        if method == "post":
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url , params = post_data)

    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print("[+]Testing Form in " + link)
                vuln_to_xss = self.xss_scanner_forms(form , link)
                if vuln_to_xss:
                    print("\n\n[*****]XSS DISCOVERED IN " + link + " in the form: ")
                    print(form)

            if "=" in link:
                print("[+]Testing " + link)
                vuln_to_xss = self.xss_scanner_link(link)
                if vuln_to_xss:
                    print("\n\n[*****]XSS DISCOVERED IN " + link)


    def sqli_scanner(self):
        #sqli_test_script_list = ['or 1=1','or 1=1--','or 1=1#','or 1=1/*',"admin' --","admin' #","admin'/*","admin' or '1'='1","admin' or '1'='1'--"]
        #for sqli_test_script in sqli_test_script_list:
        sqli_test_script = "'or 1=1"
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print("[/]Testing form in " + link)
                response = self.submit_forms(form, sqli_test_script, link)
                if "You have an error in your SQL syntax" in response.content:
                    print("[*****]SQLi DISCOVERED IN " + link + " in the form: ")
                    print(form)


    def xss_scanner_link(self , url):
        xss_test_script = "<sCript>alert('XSS')</scriPt>"
        url = url.replace("=" , "=" + xss_test_script)
        response = self.session.get(url)
        if xss_test_script in response.content:
            return True

    def xss_scanner_forms(self , form , url):
        xss_test_script = "<sCript>alert('XSS')</scriPt>"
        response = self.submit_forms(form , xss_test_script , url)
        if xss_test_script in response.content:
            return True
